def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return True
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return False

def fibonacci_search(arr, target):
    fib2, fib1 = 0, 1
    fibM = fib2 + fib1
    n = len(arr)

    while fibM < n:
        fib2, fib1 = fib1, fibM
        fibM = fib2 + fib1

    offset = -1

    while fibM > 1:
        i = min(offset + fib2, n - 1)

        if arr[i] < target:
            fibM, fib1, fib2 = fib1, fib2, fib1 - fib2
            offset = i
        elif arr[i] > target:
            fibM, fib1, fib2 = fib2, fib1 - fib2, fib2 - fib1
        else:
            return True

    return fib1 and offset + 1 < n and arr[offset + 1] == target

def main():
    roll_numbers = sorted([23, 45, 12, 67, 34, 89, 10, 56, 78, 90])
    search_roll = int(input("Enter roll number to search: "))
    print("Binary Search: Student attended training program:", binary_search(roll_numbers, search_roll))
    print("Fibonacci Search: Student attended training program:", fibonacci_search(roll_numbers, search_roll))

if __name__ == "__main__":
    main()
